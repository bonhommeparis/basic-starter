// ------------------------------------------------------------
// MIXINS
// ------------------------------------------------------------

// --------
// Size
// --------
@mixin size($value) {
  $width: nth($value, 1);
  $height: $width;

  @if length($value) > 1 {
    $height: nth($value, 2);
  }

  width: $width;
  height: $height;
}

// --------
// Positioning
// --------
@mixin absolute() {
  position: absolute;
  top: 0; right: 0; bottom: 0; left:0;
  margin: auto;
}

@mixin fixed() {
  position: fixed;
  top: 0; right: 0; bottom: 0; left:0;
  margin: auto;
}

@mixin centerBlock() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// --------
// Visibility
// --------
@mixin visible($important: true) {
  $important: important($important);
  opacity: 1 $important;
  visibility: visible $important;
}

@mixin hidden($important: true) {
  $important: important($important);
  opacity: 0 $important;
  visibility: hidden $important;
}

/* -----
Utils
----- */
@mixin clearfix() {
  &::after {
    clear: both;
    content: '';
    display: table;
  }
}

/* -----
Outer-container
----- */
@mixin outerContainer() {
  @include clearfix();

  position: relative;
	display: block;

  width: 100%;
	margin-left: auto;
	margin-right: auto;

  border-color: transparent;
  border-style: solid;
  border-top-width: 0;
  border-bottom-width: 0;

  border-left-width: $outer-container-margin;
  border-right-width: $outer-container-margin;
}

// -------------------------
// Typography
// -------------------------

//
// Generate a font-size and baseline-compatible line-height.
//
// @link   https://github.com/inuitcss/inuitcss/c14029c/tools/_tools.font-size.scss
// @param  {Number}  $font-size           - The size of the font.
// @param  {Number}  $line-height [auto]  - The line box height.
// @param  {Boolean} $important   [false] - Whether the font-size is important.
// @output `font-size`, `line-height`
//
@mixin fontSize($font-size, $line-height: auto, $important: false) {
  $important: important($important);
  font-size: rem($font-size) $important;

  @if ($line-height == 'auto') {
    line-height: ceil($font-size / $line-height) * ($line-height / $font-size) $important;
  }
  @else {
    @if (type-of($line-height) == number or $line-height == 'inherit' or $line-height == 'normal') {
      line-height: $line-height $important;
    }
    @else if ($line-height != 'none' and $line-height != false) {
      @error "Dâ€™oh! `#{$line-height}` is not a valid value for `$line-height`.";
    }
  }
}

// -------------------------
// Buttons
// -------------------------
@mixin resetBtn() {
  display: inline-block;
  overflow: visible;
  margin: 0;
  padding: 0;
  outline: 0;
  border: 0;
  background: none transparent;
  color: inherit;
  vertical-align: middle;
  text-align: center;
  text-decoration: none;
  text-transform: none;
  font: inherit;
  line-height: normal;
  cursor: pointer;
  user-select: none;

  white-space: normal;
  -webkit-font-smoothing: inherit;
  -moz-osx-font-smoothing: inherit;
  -webkit-appearance: none;

  &:focus { outline: none; }

  &::-moz-focus-inner {
    border: 0;
    padding: 0;
  }
}

@mixin unselectable($important: true) {
  $important: important($important);
  cursor: default $important;
  user-select: none $important;
}

@mixin unclickable($important: true) {
  $important: important($important);
  pointer-events: none $important;
  cursor: default $important;
}

@mixin hover() {
  &.is-current,
  html.is-desktop &:hover {
  // &:hover {
    @content;
  }
}

//
// Set the color of the highlight that appears over a link while it's being tapped.
//
// By default, the highlight is suppressed.
//
// @param  {Color} $value [rgba(0, 0, 0, 0)] - The value of the highlight.
// @output `-webkit-tap-highlight-color`
//
@mixin tapHighlightcolor($value: rgba(0, 0, 0, 0)) {
  -webkit-tap-highlight-color: $value;
}

// -------------------------
// Animation
// -------------------------
@mixin animateAutoAlpha( $value, $duration, $ease:linear ) {

  @if $value > 0 {
    opacity: $value;
    visibility: visible;
    pointer-events: initial;
    transition: opacity $duration $ease 0s, visibility 0s 0s;
  } @else {
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
    transition: opacity $duration $ease 0s, visibility 0s $duration;
  }
}

// -------------------------
// Ratio Container
// -------------------------

@mixin ratioContainer($ratio: 100%, $useBefore: true) {
  position: relative;
  display: block;
  width: 100%;
  overflow: hidden;

  @if $useBefore {
    &::before {
      display: block;
      width: 100%;
      content: "";
      padding-top: $ratio;
    }
  } @else {
    height: 0;
    padding-top: $ratio;
  }

}

// -------------------------
// Form
// -------------------------

/* -----
Placeholder
----- */
@mixin placeholder {
  &:-moz-placeholder,
  &:-ms-textarea-placeholder,
  &:-webkit-textarea-placeholder,
  &:placeholder { @content }
}
